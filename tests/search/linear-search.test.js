var assert = require('chai').assert;
var search = require('../../search/linear-search');

describe('linear-search', function () {
    it('iterative', function () {
        assert.equal(search.iterative(3, []), -1);
        assert.equal(search.iterative(3, [1]), -1);
        assert.equal(search.iterative(1, [1]), 0);
        assert.equal(search.iterative(1, [1, 3, 5]), 0);
        assert.equal(search.iterative(3, [1, 3, 5]), 1);
        assert.equal(search.iterative(5, [1, 3, 5]), 2);
        assert.equal(search.iterative(0, [1, 3, 5]), -1);
        assert.equal(search.iterative(2, [1, 3, 5]), -1);
        assert.equal(search.iterative(4, [1, 3, 5]), -1);
        assert.equal(search.iterative(6, [1, 3, 5]), -1);
        assert.equal(search.iterative(1, [1, 3, 5, 7]), 0);
        assert.equal(search.iterative(3, [1, 3, 5, 7]), 1);
        assert.equal(search.iterative(5, [1, 3, 5, 7]), 2);
        assert.equal(search.iterative(7, [1, 3, 5, 7]), 3);
        assert.equal(search.iterative(0, [1, 3, 5, 7]), -1);
        assert.equal(search.iterative(2, [1, 3, 5, 7]), -1);
        assert.equal(search.iterative(4, [1, 3, 5, 7]), -1);
        assert.equal(search.iterative(6, [1, 3, 5, 7]), -1);
        assert.equal(search.iterative(8, [1, 3, 5, 7]), -1);
        assert.equal(search.iterative('efg', ['abc', 'bcd', 'cde', 'def', 'efg', 'fgh']), 4);
    });
    it('recursive', function () {
        assert.equal(search.recursive(3, []), -1);
        assert.equal(search.recursive(3, [1]), -1);
        assert.equal(search.recursive(1, [1]), 0);
        assert.equal(search.recursive(1, [1, 3, 5]), 0);
        assert.equal(search.recursive(3, [1, 3, 5]), 1);
        assert.equal(search.recursive(5, [1, 3, 5]), 2);
        assert.equal(search.recursive(0, [1, 3, 5]), -1);
        assert.equal(search.recursive(2, [1, 3, 5]), -1);
        assert.equal(search.recursive(4, [1, 3, 5]), -1);
        assert.equal(search.recursive(6, [1, 3, 5]), -1);
        assert.equal(search.recursive(1, [1, 3, 5, 7]), 0);
        assert.equal(search.recursive(3, [1, 3, 5, 7]), 1);
        assert.equal(search.recursive(5, [1, 3, 5, 7]), 2);
        assert.equal(search.recursive(7, [1, 3, 5, 7]), 3);
        assert.equal(search.recursive(0, [1, 3, 5, 7]), -1);
        assert.equal(search.recursive(2, [1, 3, 5, 7]), -1);
        assert.equal(search.recursive(4, [1, 3, 5, 7]), -1);
        assert.equal(search.recursive(6, [1, 3, 5, 7]), -1);
        assert.equal(search.recursive(8, [1, 3, 5, 7]), -1);
        assert.equal(search.recursive('efg', ['abc', 'bcd', 'cde', 'def', 'efg', 'fgh']), 4);
    });
    it('functional', function () {
        assert.equal(search.functional(3, []), -1);
        assert.equal(search.functional(3, [1]), -1);
        assert.equal(search.functional(1, [1]), 0);
        assert.equal(search.functional(1, [1, 3, 5]), 0);
        assert.equal(search.functional(3, [1, 3, 5]), 1);
        assert.equal(search.functional(5, [1, 3, 5]), 2);
        assert.equal(search.functional(0, [1, 3, 5]), -1);
        assert.equal(search.functional(2, [1, 3, 5]), -1);
        assert.equal(search.functional(4, [1, 3, 5]), -1);
        assert.equal(search.functional(6, [1, 3, 5]), -1);
        assert.equal(search.functional(1, [1, 3, 5, 7]), 0);
        assert.equal(search.functional(3, [1, 3, 5, 7]), 1);
        assert.equal(search.functional(5, [1, 3, 5, 7]), 2);
        assert.equal(search.functional(7, [1, 3, 5, 7]), 3);
        assert.equal(search.functional(0, [1, 3, 5, 7]), -1);
        assert.equal(search.functional(2, [1, 3, 5, 7]), -1);
        assert.equal(search.functional(4, [1, 3, 5, 7]), -1);
        assert.equal(search.functional(6, [1, 3, 5, 7]), -1);
        assert.equal(search.functional(8, [1, 3, 5, 7]), -1);
        assert.equal(search.functional('efg', ['abc', 'bcd', 'cde', 'def', 'efg', 'fgh']), 4);
    });
    it('reduce', function () {
        assert.equal(search.reduce(3, []), -1);
        assert.equal(search.reduce(3, [1]), -1);
        assert.equal(search.reduce(1, [1]), 0);
        assert.equal(search.reduce(1, [1, 3, 5]), 0);
        assert.equal(search.reduce(3, [1, 3, 5]), 1);
        assert.equal(search.reduce(5, [1, 3, 5]), 2);
        assert.equal(search.reduce(0, [1, 3, 5]), -1);
        assert.equal(search.reduce(2, [1, 3, 5]), -1);
        assert.equal(search.reduce(4, [1, 3, 5]), -1);
        assert.equal(search.reduce(6, [1, 3, 5]), -1);
        assert.equal(search.reduce(1, [1, 3, 5, 7]), 0);
        assert.equal(search.reduce(3, [1, 3, 5, 7]), 1);
        assert.equal(search.reduce(5, [1, 3, 5, 7]), 2);
        assert.equal(search.reduce(7, [1, 3, 5, 7]), 3);
        assert.equal(search.reduce(0, [1, 3, 5, 7]), -1);
        assert.equal(search.reduce(2, [1, 3, 5, 7]), -1);
        assert.equal(search.reduce(4, [1, 3, 5, 7]), -1);
        assert.equal(search.reduce(6, [1, 3, 5, 7]), -1);
        assert.equal(search.reduce(8, [1, 3, 5, 7]), -1);
        assert.equal(search.reduce('efg', ['abc', 'bcd', 'cde', 'def', 'efg', 'fgh']), 4);
    });
});
